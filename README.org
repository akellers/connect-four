#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Vier Gewinnt
#+AUTHOR: Andreas Kellers
#+EMAIL: andreas.kellers@gmail.com
#+LANGUAGE: de
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.3 (Org mode 9.1.9)

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize, frame=single, rulecolor=\color{gray}}
#+LATEX_HEADER_EXTRA: \usepackage{ngerman, a4, longtable}
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE: Eine programmatische Annäherung
#+LATEX_COMPILER: pdflatex
#+DATE: \today

* Einführung

  *Connect four* (im Deutschen *Vier Gewinnt*) ist ein Strategiespiel
  für zwei Spieler. Das Spielfeld besteht aus einem Gitter mit 7
  Spalten (senkrecht) und 6 Reihen (waagerecht). Das Spielfeld steht
  aufrecht. Das Setzen der Steine kann nur in der nächsten freien
  Reihe erfolgen. Die Spieler setzen abwechselnd jeweils einen
  Spielstein (klassisch in den Farben /Rot/ und /Gelb/). Ziel ist
  es, eine Reihe von 4 Steinen in der eigenen Farbe zu setzen. Dies
  kann senkrecht, waagerecht oder auch diagonal erfolgen.

  Es besteht jeweils abwechselnd Zugzwang. Die Steine können beliebig
  in eine der Spalten platziert werden (sofern noch nicht bis zur
  obersten, sechsten Reihe besetzt). Jeder Spiele hat genau $21 = 6
  \times 7 / 2$ Steine. Den ersten Zug hat Spieler Rot.

  Gewonnen hat der Spieler, dem es zuerst gelingt, eine Viererreihe zu
  bilden, d.h. vier Steine in vertikal, horizontal oder auch diagonal
  benachbarten Feldern.

* Kodierung

  Der Verlauf eines Spieles lässt sich eindeutig durch die Folge der
  Spalten beschreiben, in denen ein Spieler seinen Stein platziert.

  Ist zum Beispiel für die ersten $2 \times 3 = 6$ Züge die Folge der
  verwendeten Spalten $\{3, 2, 2, 1, 3, 4\}$ ergibt sich folgende
  Spielfeld mit $R = Rot$ für den ersten Spieler, $G = Gelb$ für den
  Zweiten. Zur Veranschaulichung in der tabellarischen Darstellung
  wird die Nummer des Spielzugs als Index an $R$ oder $G$ angezeigt.

  #+ATTR_LATEX: :environment longtable :align |c|c|c|c|c|c|c|
  |   1 | 2   | 3   |   4 | 5 | 6 | 7 |
  |-----+-----+-----+-----+---+---+---|
  |     |     |     |     |   |   |   |
  |     |     |     |     |   |   |   |
  |     |     |     |     |   |   |   |
  |     | R_3 | R_5 |     |   |   |   |
  | G_4 | G_2 | R_1 | G_6 |   |   |   |

  Die Kodierung als Liste $L = \{l_1, \ldots, \l_n\}$ mit $l_i \in \{1,
  \ldots 7\}$ erlaubt folgende Ableitungen:

  1. Spieler im $i$-ten Zug ist /Rot/, falls $i$ ungerade, sonst
     /Gelb/ (unter der Voraussetzung, dass /Rot/ den ersten Zug macht.
  2. Mit Zug $l_i$ befinden sich $i$ Spielsteine in dem Gitter.
  3. Die Liste hat eine maximale Länge $n = 6 \times 7 = 42$.
  4. In jede Spalte kann höchstens 6 mal ein Stein gesetzt werden,
     d.h.: Für $s = \{1, \dots, 7\}$ gibt es maximal 6 Indizes $i_j$
     mit $l_{i_j} = s$.
  5. Farbe und Position des Steins im Zug $l_i$ auf dem Gitter sind:
     + Farbe: /Rot/ falls $i \equiv 1 \mod 2$, sonst /Gelb/.
     + Spalte: $i$
     + Zeile: Es sei $L' = \{l_1, \ldots, l_i\}$ die Teilliste von
       $L$ bis zum Zug $l_i$. Die Zeile ist dann die Anzahl der
       Elemente $l_j$ in $L'$ mit $l_i = l_j$.

* Implementierung
  :PROPERTIES:
  :header-args:python:   :results output :python python3.7 -i 'connect-four.py' :exports both
  :END:

  Die Implementierung in =Python= erfolgt in dem Skript
  [[file:connect-four.py]]. Nachfolgende Beispiele verwenden das
  Skript und zeigen den jeweiligen Output.

  Für die Kodierung der Spielverläufe als Liste von Spaltenindizes
  wird in der Umsetzung ein String (Datentyp =str=) verwendet. Aus der
  oben verwendeten Liste wird in =Python= somit die Zeichenkette
  ='322134'=.

** Funktion =grid=

   Die Funktion =grid(s)= erzeugt aus einer derartigen Spielfolge eine
   Zeichenkette mit einer einfachen Darstellung des resultierenden
   Spielfelds.

   #+NAME: grid
   #+BEGIN_SRC python :var s = "322134"
    PLAYERS = { 0: 'R', 1: 'G' } # to suppress ASCII encoding
    print("Board for game sequence '%s':" % s)
    print(grid(s))
   #+END_SRC

   #+RESULTS: grid
   : Board for game sequence '322134':
   :  |                     | 6
   :  |                     | 5
   :  |                     | 4
   :  |                     | 3
   :  |    R  R             | 2
   :  | G  G  R  G          | 1
   :  +-1--2--3--4--5--6--7-+

** Funktion =decode=

   Die Funktion =grid(s)= nutzt intern ein Dictionary (Typ
   =dict=). Schlüssel (Keys) für dieses Dictionary sind dabei die
   (besetzten) Positionen. Hierbei ist zu beachten, dass die Werte für
   Zeilen und Spalten 0-basiert sind, d.h. auf dem klassischen
   Spielfeld mit 6 Zeilen und 7 Spalten git es Positionen von =(0, 0)=
   bis =(5, 6)=. Die Werte (Values) sind die Spieler-Indizes. Die
   Positionen sind Tupel (Zeile, Spalte) mit Typ =(int, int)=, Spieler
   sind =0= oder =1=.

   Die Funktion =decode= wandelt eine Zeichenkette =s= mit einer
   Zugfolge in ein entsprechendes Dictionary um. Hierbei wird
   sichergestellt, dass sich über die Zugfolge nur valide Positionen
   auf dem Spielfeld ergeben, d.h. die maximale Zeilen- und
   Spaltenanzahl nicht überschritten wird.

   In =Python= sieht das Dictionary für das oben gezeigte Gitter wie
   folgt aus:

   #+NAME: decode
   #+BEGIN_SRC python :var s = "322134"
    print("Game dictionary for sequence '%s':" % s)
    print(decode(s))
   #+END_SRC

   #+RESULTS: decode
   : Game dictionary for sequence '322134':
   : {(0, 2): 0, (0, 1): 1, (1, 1): 0, (0, 0): 1, (1, 2): 0, (0, 3): 1}

** Function =encode=

   Die Funktion ist das Pendant zu =decode= und wandelt ein Dictionary
   mit den Positionen und Spielern um in eine Zeichenkette mit der
   Folge der gewählten Spalten.

   Mit dem =dict= aus dem obigen Beispiel liefert die Funktion wieder
   die Zeichenkette ='322134'=:

   #+NAME: encode
   #+BEGIN_SRC python :var d = "{(0, 2): 0, (0, 1): 1, (1, 1): 0, (0, 0): 1, (1, 2): 0, (0, 3): 1}"
    d = eval(d) # conversion into dict type
    print("Game sequence for '%s':" % d)
    print(encode(d))
   #+END_SRC

   #+RESULTS: encode
   : Game sequence for dictionary '{(0, 2): 0, (0, 1): 1, (1, 1): 0, (0, 0): 1, (1, 2): 0, (0, 3): 1}':
   : 322134

   Die Funktion =encode= ist invers zu =decode= (bei validen
   Spielverläufen innerhalb des Spielfelds):

   #+NAME: decode-encode
   #+BEGIN_SRC python :var s = "12345345235"
     print("Assert: `encode' after `decode' yields sequence '%s' again:" % s)
     print(encode(decode(s)) == s)
   #+END_SRC

   #+RESULTS: decode-encode
   : Assert: `encode' after `decode' yields sequence '12345345235' again:
   : True

** Funktion =next_dicts=

   Die Funktion =next_dicts(d, lim)= generiert ausgehend von der
   Spielfolge in dem Dictionary =d= die Liste der Dictionaries über
   die nächsten =lim= Züge (Defaultwert für =d= ist das leere
   Spielfeld ={}= und 1 für =lim=).

   Die resultierende Liste enthält Spielfolgen der Länge =len(d) +
   lim= oder kürzer, falls die Spielfolge vorher mit dem Sieg eines
   Spielers oder einem Unentschieden endet. Man beachte: Eine
   Spielfolge ist maximal 42 Spielzüge lang.

   Beginnend mit einem leeren Feld gibt es z.B. über die ersten 3
   Spielzüge genau $7^3 = 343$ unterschiedliche
   Spielfolgen. Allgemeiner: Für die ersten $n$ Züge mit $n <= 6$ gibt
   es $7^n$ Zugfolgen (da mangels Zügen noch kein Spieler gewonnnen
   haben kann und maximal mit dem letzten Zug eine Spalte komplett
   gefüllt ist).

   #+NAME: next-dicts-start
   #+BEGIN_SRC python :var n = 5
     print("Assert: Number of game sequences equals power of 7 for first %d moves." % n)
     for i in range(n):
	 l = len(next_dicts(lim=i+1))
	 m = 7**(i+1)
	 print("Moves:%2d Sequences: %5d == 7^%d [%s]" % (i+1, l, i+1, l == m))
   #+END_SRC

   #+RESULTS: next-dicts-start
   : Assert: Number of game sequences equals power of 7 for first 5 moves.
   : Moves: 1 #Sequences:     7 == 7^1 [True]
   : Moves: 2 #Sequences:    49 == 7^2 [True]
   : Moves: 3 #Sequences:   343 == 7^3 [True]
   : Moves: 4 #Sequences:  2401 == 7^4 [True]
   : Moves: 5 #Sequences: 16807 == 7^5 [True]

   Die Funktion =next_dicts= kann mit einer Spielfolge =d= aufgerufen
   werden und generiert dann ausgehend von diesem Stand mögliche
   Fortsetzungen. An folgendem Beispiel erkennt man, dass Spieler G
   mit einem Stein in der zweiten Spalte das Spiel gewinnen
   kann. Spielzüge, die zu einem Sieg führen, werden explizit
   ausgegeben.

   #+NAME: next-dicts-contd
   #+BEGIN_SRC python :var s = "343252356332" :var n = 2
     PLAYERS = { 0: 'R', 1: 'G' } # to suppress ASCII encoding
     print("Game sequences from '%s' (limited by %n moves):" % (s, n))
     print(grid(s))
     d = decode(s)
     l = next_dicts(d, lim=n)
     print(len(l))
   #+END_SRC

   #+RESULTS: next-dicts-contd
   #+begin_example
    |                     | 6
    |       R             | 5
    |       G             | 4
    |    G  R             | 3
    |    G  R     G       | 2
    |    G  R  G  R  R    | 1
    +-1--2--3--4--5--6--7-+
   G wins! Vertical at (4, 2) [34325235633272].
   G wins! Vertical at (4, 2) [34325235633262].
   G wins! Vertical at (4, 2) [34325235633252].
   G wins! Vertical at (4, 2) [34325235633242].
   G wins! Vertical at (4, 2) [34325235633232].
   G wins! Vertical at (4, 2) [34325235633212].
   48
   #+end_example

   Man sieht an der Ausgabe, dass bei zwei Folgezügen Spieler G mit
   einen vierten Stein in Zeile 4 und Spalte 2 gewinnt. Dazu darf aber
   Spieler R dieses Feld nicht vorher besetzen. Insgesamt gibt es 48
   Ergebnisse, da jeder Spieler 7 Spalten besetzen kann, nur Spalte 2
   kann nicht von beiden Spielen genutzt werden.

* Ideen

  Die Implementierung unterstützt mittlerweile einen einfachen
  Spielmodus, der sich via =ipython -i connect-four.py= mit =play()=
  aufrufen lässt. Mit dem optionalen Parameter =auto= kann eine Liste
  der Spielerindizes übergeben werden, für die dann der Algorithmus
  die Zugauswahl übernimmt.  
